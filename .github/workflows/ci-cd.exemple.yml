name: CI/CD Pipeline for Vue.js Client and Elixir Phoenix Backend

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Source Stage - Frontend
  source_frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js for frontend
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install frontend dependencies
        run: npm install
        working-directory: ./TimeManagerInterface

      - name: Run ESLint for frontend
        run: npm run lint
        working-directory: ./TimeManagerInterface

  # Source Stage - Backend
  source_backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Elixir for backend
        uses: erlef/setup-beam@v1
        with:
          otp-version: '25.0.4'
          elixir-version: '1.14.1'

      - name: Install backend dependencies
        run: mix deps.get
        working-directory: ./TimeManagerProject

      - name: Run Credo Linter for backend
        run: mix credo --min-priority=1
        working-directory: ./TimeManagerProject

  # Build Stage - Frontend
  build_frontend:
    runs-on: ubuntu-latest
    needs: source_frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js for frontend
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Build frontend Docker image
        run: docker build -t vue-app ./TimeManagerInterface

  # Build Stage - Backend
  build_backend:
    runs-on: ubuntu-latest
    needs: source_backend
    services:
      db:
        image: postgres:latest
        env:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: admin
          POSTGRES_DB: time_manager_app_dev
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Elixir for backend
        uses: erlef/setup-beam@v1
        with:
          otp-version: '25.0.4'
          elixir-version: '1.14.1'

      - name: Build backend Docker image
        run: docker build -t phoenix-app ./TimeManagerProject

  # Test Stage - Frontend (commented for now)
  # test_frontend:
  #   runs-on: ubuntu-latest
  #   needs: build_frontend
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Set up Node.js for frontend
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: '18'

  #     - name: Install frontend dependencies
  #       run: npm install
  #       working-directory: ./TimeManagerInterface

  #     - name: Run frontend tests
  #       run: npm run test
  #       working-directory: ./TimeManagerInterface

  # Test Stage - Backend
  test_backend:
    runs-on: ubuntu-latest
    needs: build_backend
    services:
      db:
        image: postgres:latest
        env:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: admin
          POSTGRES_DB: time_manager_app_dev
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build and run application containers
        run: |
          docker-compose -f ../docker-compose.yml up -d
        working-directory: ${{ github.workspace }}

      - name: Set up Elixir for backend
        uses: erlef/setup-beam@v1
        with:
          otp-version: '25.0.4'
          elixir-version: '1.14.1'

      - name: Install backend dependencies
        run: mix deps.get
        working-directory: ./TimeManagerProject

      - name: Run backend tests
        run: mix test
        working-directory: ./TimeManagerProject

  # Deploy Stage - Frontend (commented for now)
  # deploy_frontend:
  #   runs-on: ubuntu-latest
  #   needs: test_frontend
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Log in to Docker Hub
  #       env:
  #         DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  #         DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  #       run: echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

  #     - name: Tag and Push frontend Docker image
  #       run: |
  #         docker tag vue-app your-dockerhub-username/vue-app:latest
  #         docker push your-dockerhub-username/vue-app:latest

  # Deploy Stage - Backend (commented for now)
  # deploy_backend:
  #   runs-on: ubuntu-latest
  #   needs: test_backend
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Log in to Docker Hub
  #       env:
  #         DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  #         DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  #       run: echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

  #     - name: Tag and Push backend Docker image
  #       run: |
  #         docker tag phoenix-app your-dockerhub-username/phoenix-app:latest
  #         docker push your-dockerhub-username/phoenix-app:latest